scopeName: 'source.purebasic'
name: 'PureBasic'
fileTypes: ['pb', 'pbi']
patterns: [
  { include: '#variable' }
  { include: '#comment' }
  { include: '#numeric' }
  { include: '#constant' }
  { include: '#string' }
  { include: '#keyword' }
  { include: '#label' }
  { include: '#assembly' }
  { include: '#operator' }
  {
    begin: '([A-Za-z_][A-Za-z0-9_]+)\\s*(\\()'
    beginCaptures:
      1:
        name: 'entity.name.function.purebasic'
      2:
        name: 'punctuation.definition.seperator.purebasic'
    end: '\\)'
    endCaptures:
      0:
        name: 'punctuation.definition.seperator.purebasic'
    patterns: [
      { include: '$base' }
    ]
  }
  {
    match: '([A-Za-z_][A-Za-z0-9_]+)\\s*(::)'
    captures:
      1:
        name: 'entity.name.module.purebasic'
      2:
        name: 'keyword.operator.module-scope.purebasic'
    patterns: [
      { include: '$base' }
    ]
  }
]

repository:
  assembly: {
    match: '^\\s*(![^;]*)'
    name: 'storage.type.assembly.purebasic'
  }

  label: {
    match: '[a-zA-Z0-9_]+\s*:(?!:)'
    name: 'entity.label.purebasic'
  }

  variable: {
    match: '\\*[a-zA-Z0-9_]+'
    name: 'variable.pointer.purebasic'
  }

  comment: {
    match: ';+.*$'
    name: 'comment.line.purebasic'
  }

  numeric:
    patterns: [
      {
         match: '\\b[0-9]+'
         name: 'constant.numeric.decimal.purebasic'
      }
      {
         match: '\\b[0-9]+\\.[0-9]+\\b'
         name: 'constant.numeric.float.purebasic'
      }
      {
         match: '\\$[abcdefABCDEF0-9]+\\b'
         name: 'constant.numeric.hexadecimal.purebasic'
      }
      {
         match: '%[0-9]+\\b'
         name: 'constant.numeric.binary.purebasic'
      }
    ]
    name: 'constant.numeric.purebasic'

  constant: {
    match: '(#([a-zA-Z0-9_]+\\$?)?)'
    name: 'constant.purebasic'
  }

  operator:
    patterns: [
      {
        match: '(\\+|-|\\/|%|=|<>|>|<|>=|<=)'
        name: 'keyword.operator.arithmetic.purebasic'
      }
      {
        match: '(~|!|&|\\|)'
        name: 'keyword.operator.bitwise.purebasic'
      }
      {
        match: '(?i)[a-zA-Z0-9](?<!return)\\s?(\\*)'
        captures:
          1:
            name: 'keyword.operator.arithmetic.purebasic'
      }
      {
        match: '(:)'
        name: 'keyword.operator.concatenation.purebasic'
      }
      {
        match: '(,)'
        name: 'punctuation.definition.seperator.comma.purebasic'
      }
      {
        match: '(\\[|\\])'
        name: 'punctuation.definition.seperator.brackets.purebasic'
      }
      {
        match: '(,|\\\\)'
        name: 'punctuation.definition.seperator.brackets.purebasic'
      }
    ]

  keyword:
    patterns: [
      {
        match: '(?ix)
        \\b(
            define
        )\\b'
        name: 'keyword.define.purebasic'
      }
      {
        match: '(?ix)
        \\b(
            prototype
          | prototypec
        )\\b'
        name: 'keyword.prototype.purebasic'
      }
      {
        match: '(?ix)
        \\b(
            declare
          | declarec
          | declarecdll
          | declaredll
        )\\b'
        name: 'keyword.declare.purebasic'
      }
      {
        match: '(?ix)
        \\b(
            global
          | protected
          | shared
          | static
        )\\b'
        name: 'keyword.variable.access.purebasic'
      }
      {
        match: '(?ix)
        \\b(
            dim
          | newlist
          | newmap
          | redim
        )\\b'
        name: 'keyword.container.purebasic'
      }
      {
        match: '(?ix)
        \\b(
            compilercase
          | compilerdefault
          | compilerelse
          | compilerelseif
          | compilerendif
          | compilerendselect
          | compilererror
          | compilerif
          | compilerselect
          | compilerwarning
          | disableasm
          | disableexplicit
          | enableasm
          | enableexplicit
        )\\b'
        name: 'keyword.compiler-directive.purebasic'
      }
      {
        match: '(?ix)
        \\b(
            endprocedure
          | procedure
          | procedurec
          | procedurecdll
          | proceduredll
        )\\b'
        name: 'keyword.procedure.purebasic'
      }
      {
        match: '(?ix)
        \\b(
            includefile
          | includepath
          | xincludefile
        )\\b'
        name: 'keyword.include.purebasic'
      }
      {
        match: '(?ix)
        \\b(
            and
          | not
          | or
          | xor
        )\\b'
        name: 'keyword.operator.logical.purebasic'
      }
      {
        match: '(?ix)
        \\b(
            break
          | case
          | continue
          | else
          | elseif
          | end
          | end
          | endif
          | endwith
          | fakereturn
          | for
          | foreach
          | forever
          | gosub
          | goto
          | if
          | next
          | procedurereturn
          | repeat
          | return
          | select
          | step
          | to
          | until
          | until
          | wend
          | while
          | with
        )\\b'
        name: 'keyword.control.purebasic'
      }
      {
        match: '(?ix)
        \\b(
            align
          | as
          | calldebugger
          | data
          | datasection
          | debug
          | debuglevel
          | declaremodule
          | default
          | disabledebugger
          | enabledebugger
          | enddatasection
          | enddeclaremodule
          | endenumeration
          | endimport
          | endinterface
          | endmacro
          | endmodule
          | endselect
          | endstructure
          | endstructureunion
          | enumeration
          | enumerationbinary
          | extends
          | import
          | importc
          | includebinary
          | interface
          | macro
          | macroexpandedcount
          | module
          | read
          | restore
          | runtime
          | structure
          | structureunion
          | swap
          | threaded
          | to
          | undefinemacro
          | unusemodule
          | usemodule
        )\\b'
        name: 'keyword.purebasic'
      }
    ]

  string:
    patterns: [
      {
        begin: '"'
        beginCaptures:
          0:
            name: 'string.purebasic'
        end: '"'
        endCaptures:
          0:
            name: 'string.purebasic'
        name: 'string.purebasic'
      }
      {
        begin: '\''
        beginCaptures:
          0:
            name: 'constant.character.purebasic'
        end: '\''
        endCaptures:
          0:
            name: 'constant.character.purebasic'
        name: 'constant.character.purebasic'
      }
    ]
